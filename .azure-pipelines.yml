trigger:
  batch: true
  branches:
    include:
    - master
    - release/*

stages:
- stage: build
  condition: false
  displayName: Build
  jobs:
    ############ LINUX BUILD ############
    - job: Build_Linux_x64
      displayName: Linux x64
      timeoutInMinutes: 120
      pool:
        vmImage: ubuntu-16.04
      steps:
        - bash: |
            sudo apt update
            sudo apt -y install libpango1.0-dev libgif-dev libjpeg-dev libtiff-dev autoconf libtool automake build-essential cmake
          displayName: 'Install Linux dependencies'

        - bash: |
            export CFLAGS="-ggdb3 -O2"
            ./autogen.sh --prefix=/usr --enable-warnaserror
            make -j4
            sudo make install
          displayName: 'Build and Install libgdiplus'

        - bash: |
            if ! make check; then
              cat ./tests/test-suite.log
              exit 1
            fi
          displayName: 'Run libgdiplus tests'

        - bash: |
            make -C tests run-gtest
          displayName: 'Run libgdiplus googletests'

        - bash: |
            sudo apt -y install xvfb gettext
            git clone --depth 1 --recurse-submodules https://github.com/mono/mono /tmp/mono
            cd /tmp/mono
            ./autogen.sh --prefix=/tmp/mono-dev --disable-boehm
            make -j4
          displayName: 'Clone and Build mono'

        - bash: |
            make -C /tmp/mono/mcs/class/System.Drawing run-test
          displayName: 'Run mono System.Drawing tests'

        - bash: |
            make -C /tmp/mono/mcs/class/System.Drawing run-xunit-test
          displayName: 'Run mono System.Drawing xunit tests'

        - bash: |
            xvfb-run make -C /tmp/mono/mcs/class/System.Windows.Forms run-test
          displayName: 'Run mono System.Windows.Forms tests'

        - task: PublishTestResults@2
          condition: succeededOrFailed()
          inputs:
            testRunner: JUnit
            testResultsFiles: 'tests/TestResult.xml'
            failTaskOnFailedTests: true

        - task: PublishTestResults@2
          condition: succeededOrFailed()
          inputs:
            testRunner: NUnit
            testResultsFiles: '/tmp/mono/mcs/class/**/TestResult*.xml'
            failTaskOnFailedTests: true

    ############ MACOS BUILD ############
    - job: Build_Mac_x64
      displayName: macOS x64
      timeoutInMinutes: 30
      pool:
        vmImage: macOS-10.14
      steps:
        - bash: |
            brew install glib cairo libexif libjpeg giflib libtiff autoconf libtool automake pango pkg-config cmake
          displayName: 'Install macOS dependencies'

        - bash: |
            export CFLAGS="-m64 -arch x86_64 -mmacosx-version-min=10.9"
            export LDFLAGS="-m64 -arch x86_64"
            ./autogen.sh --prefix=/tmp/libgdiplus-dev --enable-warnaserror --without-x11 --host=x86_64-apple-darwin13.0.0 --build=x86_64-apple-darwin13.0.0
            make -j4
            make install
          displayName: 'Build and Install libgdiplus'

        - bash: |
            if ! make check; then
              cat ./tests/test-suite.log
              exit 1
            fi
          displayName: 'Run libgdiplus tests'

        - bash: |
            make -C tests run-gtest
          displayName: 'Run libgdiplus googletests'

        - bash: |
            brew install gettext
            git clone --depth 1 --recurse-submodules https://github.com/mono/mono /tmp/mono
            cd /tmp/mono
            ./autogen.sh --prefix=/tmp/mono-dev --with-libgdiplus=/tmp/libgdiplus-dev/lib/libgdiplus.dylib --disable-boehm
            make -j4
          displayName: 'Clone and Build mono'

        - bash: |
            make -C /tmp/mono/mcs/class/System.Drawing run-test
          displayName: 'Run mono System.Drawing tests'

        - bash: |
            make -C /tmp/mono/mcs/class/System.Drawing run-xunit-test
          displayName: 'Run mono System.Drawing xunit tests'

        - task: PublishTestResults@2
          condition: succeededOrFailed()
          inputs:
            testRunner: JUnit
            testResultsFiles: 'tests/TestResult.xml'
            failTaskOnFailedTests: true

        - task: PublishTestResults@2
          condition: succeededOrFailed()
          inputs:
            testRunner: NUnit
            testResultsFiles: '/tmp/mono/mcs/class/**/TestResult*.xml'
            failTaskOnFailedTests: true

    ############ WINDOWS BUILD ############
    - job: Build_Windows_x86_x64
      displayName: Windows x86+x64
      timeoutInMinutes: 60
      pool:
        vmImage: vs2017-win2016
      steps:
        - script: |
            vcpkg integrate install
            vcpkg install giflib libjpeg-turbo libpng cairo glib tiff libexif glib pango --triplet x86-windows
            vcpkg install giflib libjpeg-turbo libpng cairo glib tiff libexif glib pango --triplet x64-windows
          displayName: 'Install Windows dependencies'

        - task: MSBuild@1
          displayName: 'Build libgdiplus x86'
          inputs:
            solution: libgdiplus.sln
            platform: Win32
            configuration: Release

        - task: MSBuild@1
          displayName: 'Build libgdiplus x64'
          inputs:
            solution: libgdiplus.sln
            platform: x64
            configuration: Release

    ############ LINUX MONO-NETCORE BUILD ############
    - job: Build_Linux_x64_mono_netcore
      displayName: Linux x64 mono-netcore
      timeoutInMinutes: 120
      pool:
        vmImage: ubuntu-16.04
      steps:
        - bash: |
            sudo apt update
            sudo apt -y install libpango1.0-dev libgif-dev libjpeg-dev libtiff-dev autoconf libtool automake build-essential cmake
          displayName: 'Install Linux dependencies'

        - bash: |
            export CFLAGS="-ggdb3 -O2"
            ./autogen.sh --prefix=/usr --enable-warnaserror
            make -j4
            sudo make install
          displayName: 'Build and Install libgdiplus'

        - bash: |
            sudo apt -y install xvfb gettext
            git clone --depth 1 https://github.com/mono/mono /tmp/mono
            cd /tmp/mono/netcore
            ./build.sh
          displayName: 'Clone and Build mono-netcore'

        - bash: |
            make -C /tmp/mono/netcore run-tests-corefx-System.Drawing.Common.Tests
          displayName: 'Run mono-netcore System.Drawing.Common tests'

        - task: PublishTestResults@2
          condition: succeededOrFailed()
          inputs:
            testRunner: xUnit
            testResultsFiles: '/tmp/mono/netcore/corefx/tests/TestResult*.xml'
            failTaskOnFailedTests: true

    ############ MACOS MONO-NETCORE BUILD ############
    - job: Build_Mac_x64_mono_netcore
      displayName: macOS x64 mono-netcore
      timeoutInMinutes: 120
      pool:
        vmImage: macOS-10.14
      steps:
        - bash: |
            brew install glib cairo libexif libjpeg giflib libtiff autoconf libtool automake pango pkg-config cmake
          displayName: 'Install macOS dependencies'

        - bash: |
            export CFLAGS="-m64 -arch x86_64 -mmacosx-version-min=10.9"
            export LDFLAGS="-m64 -arch x86_64"
            ./autogen.sh --prefix=/tmp/libgdiplus-dev --enable-warnaserror --without-x11 --host=x86_64-apple-darwin13.0.0 --build=x86_64-apple-darwin13.0.0
            make -j4
            make install
          displayName: 'Build and Install libgdiplus'

        - bash: |
            brew install gettext
            git clone --depth 1 https://github.com/mono/mono /tmp/mono
            cd /tmp/mono/netcore
            ./build.sh
          displayName: 'Clone and Build mono-netcore'

        - bash: |
            make -C /tmp/mono/netcore update-tests-corefx
            cp /tmp/libgdiplus-dev/lib/libgdiplus.0.dylib /tmp/mono/netcore/corefx/tests/extracted/System.Drawing.Common.Tests/libgdiplus.dylib
            make -C /tmp/mono/netcore run-tests-corefx-System.Drawing.Common.Tests
          displayName: 'Run mono-netcore System.Drawing.Common tests'

        - task: PublishTestResults@2
          condition: succeededOrFailed()
          inputs:
            testRunner: xUnit
            testResultsFiles: '/tmp/mono/netcore/corefx/tests/TestResult*.xml'
            failTaskOnFailedTests: true

- stage: package
  condition: true
  jobs:
  - job: debian
    strategy:
      maxParallel: 4
      matrix:
        ubuntu_1804:
          imageName: ubuntu:18.04
          rid: ubuntu.18.04-x64
        ubuntu_1604:
          imageName: ubuntu:16.04
          rid: ubuntu.16.04-x64
        debian_9:
          imageName: debian:9
          rid: debian.9-x64
    pool:
      vmImage: ubuntu-18.04
    container:
      image: $(imageName)
      options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"
    steps:
    - script: |
        /tmp/docker exec -t -u 0 ci-container \
        sh -c "apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confold" -y install sudo"
      displayName: Set up sudo

    - bash: |
        sudo apt -y install libpango1.0-dev libgif-dev libjpeg-dev libtiff-dev libexif-dev autoconf libtool automake build-essential
      displayName: 'Install Linux dependencies'

    - bash: |
        export CFLAGS="-ggdb3 -O2"
        ./autogen.sh --prefix=/usr --enable-warnaserror
        make -j4
        make install DESTDIR=${BUILD_ARTIFACTSTAGINGDIRECTORY}/libgdiplus/$(RID)/
      displayName: 'Build and Install libgdiplus'

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/libgdiplus' 
        artifactName: 'libgdiplus' 
        publishLocation: 'Container'
        displayName: Publish

  - job: rhel
    strategy:
      maxParallel: 4
      matrix:
        fedora_29 :
          imageName: fedora:29
          rid: fedora.29-x64
        rhel_7:
          imageName: centos:7
          rid: rhel.7-x64
        centos_7:
          imageName: centos:7
          rid: centos.7-x64
    pool:
      vmImage: ubuntu-18.04
    container:
      image: $(imageName)
      options: "--name ci-container -v /usr/bin/docker:/tmp/docker:ro"
    steps:
    - script: |
        /tmp/docker exec -t -u 0 ci-container \
        sh -c "yum install -y sudo"
      displayName: Set up sudo

    - bash: |
        sudo yum install -y cairo-devel fontconfig-devel giflib-devel glib2-devel libexif-devel libjpeg-devel libpng-devel libtiff-devel freetype-devel libtool automake make gcc gcc-c++ git
      displayName: 'Install Linux dependencies'

    - bash: |
        export CFLAGS="-ggdb3 -O2"
        ./autogen.sh --prefix=/usr --enable-warnaserror
        make -j4
        make install DESTDIR=${BUILD_ARTIFACTSTAGINGDIRECTORY}/libgdiplus/$(RID)/
      displayName: 'Build and Install libgdiplus'

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/libgdiplus' 
        artifactName: 'libgdiplus' 
        publishLocation: 'Container'
        displayName: Publish

  - job: macos
    strategy:
      maxParallel: 4
      matrix:
        osx_1013:
          imageName: macOS-10.13
          rid: osx.10.13-x64
        osx_1014:
          imageName: macOS-10.14
          rid: osx.10.14-x64
    pool:
      vmImage: $(imageName)
    steps:
    - script: |
        brew install glib cairo libexif libjpeg giflib libtiff autoconf libtool automake pango pkg-config cmake
      displayName: Install build dependencies

    - script: |
          export CFLAGS="-m64 -arch x86_64 -mmacosx-version-min=10.9"
          export LDFLAGS="-m64 -arch x86_64"
          ./autogen.sh --enable-warnaserror --without-x11 --host=x86_64-apple-darwin13.0.0 --build=x86_64-apple-darwin13.0.0
          cd src/
          make -j4
          make install DESTDIR=${BUILD_ARTIFACTSTAGINGDIRECTORY}/libgdiplus/$(RID)/

    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)/libgdiplus' 
        artifactName: 'libgdiplus' 
        publishLocation: 'Container'
        displayName: Publish